const Complaint = require('../models/Complaint');
const Customer = require('../models/Customer');

// Create a new complaint
module.exports.createComplaint = async (req, res) => {
    try {
        const { name, email, phone, branch, category, description } = req.body;
        if (!description) return res.status(400).json({ error: "Description is required" });

        // Find or create customer
        let customer = await Customer.findOne({ email });
        if (!customer) {
            customer = await Customer.create({ name, email, phone, branch });
        }

        // Create complaint (referenceId generated by schema)
        const complaint = await Complaint.create({
            customer: customer._id,
            category,
            description,
            branch,
            logs: [{ actor: "system", action: "created" }]
        });

        res.status(201).json({ success: true, complaint });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};

// Get complaint by Mongo _id
module.exports.getComplaintById = async (req, res) => {
    try {
        const complaint = await Complaint.findById(req.params.id).populate('customer');
        if (!complaint) return res.status(404).json({ error: "Complaint not found" });
        res.json(complaint);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};

// Update complaint status and response
module.exports.updateComplaintStatus = async (req, res) => {
    try {
        let { status, responseNotes } = req.body;
        const allowedStatuses = ["pending", "in-progress", "resolved", "escalated"];
        if (typeof status === 'string') {
            // normalize incoming values like "Pending", "In Progress" from UI
            const s = status.trim().toLowerCase().replace(/\s+/g, '-');
            status = s;
        }
        if (status && !allowedStatuses.includes(status)) return res.status(400).json({ error: "Invalid status" });

        const complaint = await Complaint.findById(req.params.id);
        if (!complaint) return res.status(404).json({ error: "Complaint not found" });

        if (status) complaint.status = status;
        if (responseNotes) complaint.responseNotes = responseNotes;
        complaint.updatedAt = new Date();

        const actor = req.user?.email || 'admin';
        complaint.logs.push({ actor, action: "updated", note: responseNotes });

        await complaint.save();
        res.json({ success: true, complaint });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};

// Get all complaints
module.exports.getAllComplaints = async (req, res) => {
    try {
        const { email } = req.query || {};

        // If an email query param is provided, return only that user's complaints
        if (email) {
            const customer = await Customer.findOne({ email });
            if (!customer) return res.json([]);
            const complaints = await Complaint.find({ customer: customer._id })
                .populate('customer')
                .sort({ createdAt: -1 });
            return res.json(complaints);
        }

        // Otherwise, return all complaints (admin use-case)
        const complaints = await Complaint.find().populate('customer').sort({ createdAt: -1 });
        return res.json(complaints);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};

// Get complaint by referenceId
module.exports.getComplaintByReferenceId = async (req, res) => {
    try {
        const { referenceId } = req.params;
        const complaint = await Complaint.findOne({ referenceId })
            .populate('customer');

        if (!complaint) return res.status(404).json({ error: "Complaint not found" });

        res.json(complaint);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};

// Public update for a complaint (owner-only via email)
module.exports.updateComplaintPublic = async (req, res) => {
    try {
        const { id } = req.params;
        const { email, category, description } = req.body || {};

        if (!email) return res.status(400).json({ error: "Email is required" });

        const complaint = await Complaint.findById(id).populate('customer');
        if (!complaint) return res.status(404).json({ error: "Complaint not found" });

        if (!complaint.customer || complaint.customer.email !== email) {
            return res.status(403).json({ error: "You are not allowed to edit this complaint" });
        }

        if (typeof category === 'string' && category.trim()) {
            complaint.category = category.trim();
        }
        if (typeof description === 'string' && description.trim()) {
            complaint.description = description.trim();
        }

        complaint.updatedAt = new Date();
        complaint.logs.push({ actor: email, action: "user-updated" });

        await complaint.save();
        return res.json({ success: true, complaint });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};

// Public delete for a complaint (owner-only via email)
module.exports.deleteComplaintPublic = async (req, res) => {
    try {
        const { id } = req.params;
        const email = req.body?.email || req.query?.email;

        const complaint = await Complaint.findById(id).populate('customer');
        if (!complaint) return res.status(404).json({ error: "Complaint not found" });

        // If an email is provided, enforce ownership; otherwise, allow deletion without email
        if (email) {
            if (!complaint.customer || complaint.customer.email !== email) {
                return res.status(403).json({ error: "You are not allowed to delete this complaint" });
            }
        }

        await Complaint.findByIdAndDelete(id);
        return res.json({ success: true });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
};
